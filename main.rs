use std::process::Command;
use reqwest::blocking::get;
use serde_json::Value;
use std::collections::HashSet;

fn main() {
    // Ejecuta el comando Nmap
    let output = Command::new("nmap")
        .arg("-sV")
        .arg("10.10.10.40") // Cambia la IP según tus necesidades
        .output()
        .expect("Failed to execute Nmap");

    // Convierte la salida a String y muestra el resultado
    let result = String::from_utf8_lossy(&output.stdout);
    println!("Nmap Output:\n{}", result);

    // Parsear la salida de Nmap para obtener servicios y versiones
    let lines = result.lines();
    
    // Define servicios no importantes
    let non_important_services: HashSet<&str> = vec![
        "http", "ftp", "smtp", "pop3", "imap", // Ejemplos de servicios menos relevantes
        "netbios-ssn", "microsoft-ds", "msrpc", // Ejemplos de servicios de Windows
    ].into_iter().collect();

    // Itera sobre las líneas de la salida de Nmap
    for line in lines {
        if line.contains("/tcp") {
            // Extrae el nombre del servicio y la versión (asumiendo un formato específico)
            let parts: Vec<&str> = line.split_whitespace().collect();
            if parts.len() >= 3 {
                let port = parts[0];
                let state = parts[1];
                let service = parts[2];

                // Verifica si el servicio es importante
                if non_important_services.contains(service) {
                    println!("Ignoring non-important service: {} at port {}", service, port);
                    continue; // Ignora este servicio
                }

                // Si el servicio es importante, busca vulnerabilidades
                let cve_url = "https://cve.circl.lu/api/lookup/";
                let response = get(format!("{}{}{}", cve_url, service, "1.0")) // Cambia "1.0" por la versión correspondiente
                    .expect("Failed to send request");

                // Manejo de la respuesta
                if response.status().is_success() {
                    let body = response.text().expect("Failed to read response body");
                    let json: Value = serde_json::from_str(&body).expect("Failed to parse JSON");
                    println!("Vulnerabilities for {}:\n{:?}", service, json);
                } else {
                    eprintln!("Error: Received status code {}", response.status());
                    let body = response.text().expect("Failed to read response body");
                    eprintln!("Response body:\n{}", body);
                }
            }
        }
    }
}
